program lab03b;

const P = 200;
const N = 2000;
type Tcanal = channel of Integer;
type Tvector = array[1..N] of Integer;
Tcanales = array[1..2000] of Tcanal;
var vecktordata: Tvector;
var othervecktordata: Tvector;

    process type TPvector(var canalIn: Tcanal; var canalOut, outvektwo: Tcanales; lengthv, pointprocesses:Integer; var vektor1, vektor2: Tvector);
    var j, result, test : Integer;
        begin
            
            begin
                for j := 1 to lengthv do
                begin
                    
                    canalOut[(j mod pointprocesses) + 1] ! vektor1[j];
                    outvektwo[(j mod pointprocesses) + 1] ! vektor2[j];
                    
                end;      
            end;
            canalIn ? result;
            WriteLn(result);
        end;

    process type TPProductPoint(var canalIn, vsndin: Tcanal; var canalOut :Tcanal; ndatos:Integer);
    var i: integer;
    var dato:Integer;
    var seconddato:Integer;
    var producto:Integer;
    
    begin
    producto := 0;
    for i:= 1 to ndatos do
        begin
            canalIn ? dato;
            vsndin ? seconddato;
            producto := (dato * seconddato) + producto;
        end;
        canalOut !  producto;
    end;


    process type TPGlobalProductPoint(var canalIn:Tcanales; var canalOut:Tcanal ; pointprocesses:Integer);
    var i: integer;
    var dato:Integer;
    var seconddato:Integer;
    var producto:Integer;
    begin
        for i:= 1 to pointprocesses do
        begin
            canalIn[i] ? dato;
            producto := (dato + producto);
        end;
        canalOut !  producto;
    end;


    type Tprocesses = ARRAY[1..P] of TPProductPoint;
    var pvector: TPvector;
    var locales: Tprocesses;
    var mglobal: TPGlobalProductPoint;
    var leftchannel, secondleft: Tcanales;
    var rightchannel: Tcanales;
    var canalproduct: Tcanal;

    var j: integer;
    var lengthv, pointprocesses : Integer;
    begin
        ReadLn( lengthv );
        ReadLn( pointprocesses );
                   
        begin
          for j := 1 to lengthv do
            begin
                ReadLn( vecktordata[j] );
            end;      
        end;
        begin
          for j := 1 to lengthv do
            begin
                ReadLn( othervecktordata[j] );
            end;      
        end;
        begin
            cobegin
                pvector(canalproduct, leftchannel, secondleft, lengthv, pointprocesses, vecktordata, othervecktordata);
                    for j := 1 to pointprocesses do
                        locales[j](leftchannel[j], secondleft[j],  rightchannel[j], (lengthv div pointprocesses));
                mglobal(rightchannel, canalproduct, pointprocesses);
            coend;
        end;    
    end.
